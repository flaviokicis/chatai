[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chatai-backend"
version = "0.1.0"
description = "FastAPI webhook for Twilio WhatsApp"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["fastapi", "twilio", "whatsapp", "webhook"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Framework :: FastAPI",
]
dependencies = [
  "fastapi",
  "uvicorn[standard]",
  "python-dotenv",
  "pydantic-settings",
  "twilio",
  "python-multipart",
  "langchain>=0.3.0",
  "langchain-google-genai>=2.0.0",
  "redis>=5.0.0",
  "langchain-community>=0.3.0",
  "SQLAlchemy>=2.0.29",
  "psycopg[binary]>=3.1.18",
  "cryptography>=42.0.0",
  "uuid-v7>=1.0.0",
  "langchain-openai==0.3.30",
  "alembic>=1.16.4",
  "psycopg2-binary>=2.9.10",
  "itsdangerous>=2.2.0",
  "langfuse>=3.3.4",
  "mutagen>=1.47.0",
  "tenacity>=9.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.pytest.ini_options]
addopts = "-q"
pythonpath = ["."]
testpaths = ["tests"]

[tool.uv]
dev-dependencies = [
  "pytest",
  "httpx",
  "mypy",
  "ruff",
  "pre-commit>=4.3.0",
  "types-setuptools>=80.9.0.20250822",
  "types-sqlalchemy>=1.4.53.38",
  "types-redis>=4.6.0.20241004",
  "types-requests>=2.32.4.20250809",
  "types-psycopg2>=2.9.21.20250809",
  "types-pyyaml>=6.0.12.20250822",
  "types-pytz>=2025.2.0.20250809",
  "types-jsonschema>=4.25.1.20250822",
]

[tool.mypy]
python_version = "3.12"
# Focus on new code quality, be permissive with legacy
strict = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
no_implicit_optional = false
warn_return_any = false
warn_unused_ignores = false
ignore_missing_imports = true
disallow_untyped_calls = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
warn_redundant_casts = false
warn_no_return = false
warn_unreachable = false
implicit_reexport = true

# Enable strict checking only for new architecture
[[tool.mypy.overrides]]
module = [
    "app.flow_core.actions.*",
    "app.flow_core.services.tool_executor",
    "app.flow_core.feedback.*",
    "app.core.flow_processor",
    "app.core.flow_response",
    "app.core.flow_request",
    "app.core.message_metadata",
    "app.core.messages",
    "app.core.session",
]
strict = true
disallow_untyped_defs = true
warn_return_any = true

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
  "E",   # pycodestyle (errors)
  "W",   # pycodestyle (warnings)
  "F",   # pyflakes
  "I",   # isort
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "S",   # bandit
  "ANN", # flake8-annotations
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "EM",  # flake8-errmsg
  "ERA", # eradicate (commented-out code)
  "EXE", # flake8-executable
  "FBT", # flake8-boolean-trap
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N",   # pep8-naming
  "PERF",# perflint
  "PIE", # flake8-pie
  "PL",  # pylint rules
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TRY", # tryceratops
  "RUF"  # ruff-specific rules
]
ignore = [
  "E501",  # handled by formatter; avoid line-length errors in long prompts/tests
  "ISC001", # conflicts with formatter
  # Legacy code quality - focus on new code only, ignore existing patterns
  "T201", "ERA001", "TRY400", "PLC0415", "PLR2004", "S110", "SIM105", "TC001", "TC002", "TC003",
  "TRY003", "EM101", "EM102", "TRY300", "RET504", "B904", "DTZ005", "PLR0912", "PLR0915",
  "PLR0913", "F841", "ANN001", "ANN002", "ANN003", "ANN202", "ANN401", "S108", "PTH103", "PTH118", "PTH120", 
  "PTH100", "PTH123", "S324", "SLF001", "N818", "TRY301", "FBT001", "FBT002", "S608",
  "PLR0911", "ANN204", "RUF006", "DTZ003", "RUF001", "E402", "PTH110", "PIE810", "F821",
  "W291", "W293", "SIM102", "PERF401", "B007", "PERF102", "N806", "B023", "EXE001", "ANN201",
  "B008", "RUF059", "F811", "TRY201", "PLR1722"
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ANN", "PLC0415", "RUF012", "SLF001", "PT011", "PT018"]
"backend/tests/**/*" = ["S101", "ANN", "PLC0415", "RUF012", "SLF001", "PT011", "PT018"]
"app/conversation.py" = ["S608"]
"test_*.py" = ["T201", "S105", "F841", "ANN201", "TRY300", "PLR2004"]
"validate_schemas.py" = ["T201", "S105", "F841", "ANN201", "TRY300", "EXE001"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false
mypy-init-return = true
